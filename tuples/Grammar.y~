{
module Grammar where
import Tokens
import Expr
}

%name parseExpr
%tokentype { Token }
%error { parseError }

%token
    var { TokenSym $$ }
    '@' { TokenAt }
    '$' { TokenDollar }
    ',' {TokenSeparator}
    '(' {TokenLParen}
    ')' {TokenRParen}
    sym {TokenVariable}

%%

Exp :
| '(' Exp ',' Exp ')'    {Tuple  $2 $4 }

{

parseError :: [Token] -> a
parseError tks = error ("Parse error: " ++ show tks)

}
